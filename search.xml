<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git基本使用</title>
      <link href="/2023/05/20/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/05/20/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Git基础入门"><a href="#Git基础入门" class="headerlink" title="Git基础入门"></a><strong>Git基础入门</strong></h1><h2 id="一、Git原理简要"><a href="#一、Git原理简要" class="headerlink" title="一、Git原理简要"></a><strong>一、Git原理简要</strong></h2><p>4个区域 </p><p>Workspace：工作区 Stage：暂存区 Repository：本地仓库 Remote：远程仓库</p><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201713519.png" alt="basic-usage.svg"></p><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201713154.png" alt="basic-usage-2.svg"></p><h3 id="1-下载与安装"><a href="#1-下载与安装" class="headerlink" title="1.下载与安装:"></a><strong>1.下载与安装:</strong></h3><p><a href="https://git-scm.com/download/">https://git-scm.com/download/</a></p><h3 id="2-使用入口"><a href="#2-使用入口" class="headerlink" title="2.使用入口"></a><strong>2.使用入口</strong></h3><p>win：右键菜单—git bash</p><p>mac：终端窗口</p><h3 id="3-基础配置"><a href="#3-基础配置" class="headerlink" title="3.基础配置"></a><strong>3.基础配置</strong></h3><p>首次使用添加身份说明，使用以下两个命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;你的昵称&quot;</span></span><br><span class="line"></span><br><span class="line">$ git config --global user.email 邮箱@example.com</span><br></pre></td></tr></table></figure><p>创建仓库</p><p>① 在项目文件夹下使用git bash输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>② 使用他人项目创建仓库 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> 项目url</span><br></pre></td></tr></table></figure><h2 id="二、状态与提交版本"><a href="#二、状态与提交版本" class="headerlink" title="二、状态与提交版本"></a><strong>二、状态与提交版本</strong></h2><p>文件四种状态</p><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201713561.png" alt="image-20230502111811562"></p><h3 id="1-跟踪"><a href="#1-跟踪" class="headerlink" title="1.跟踪"></a>1.跟踪</h3><p>跟踪文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add &lt;name&gt;</span><br></pre></td></tr></table></figure><p>跟踪当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure><h3 id="2-取消跟踪"><a href="#2-取消跟踪" class="headerlink" title="2.取消跟踪"></a>2.取消跟踪</h3><p>rm删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">rm</span> &lt;name&gt;</span><br></pre></td></tr></table></figure><p>保留但不跟踪</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm-cache &lt;name&gt;</span><br></pre></td></tr></table></figure><h3 id="3-文件状态修改"><a href="#3-文件状态修改" class="headerlink" title="3.文件状态修改"></a>3.文件状态修改</h3><p>修改后缓存 &#x2F; 取消缓存</p><p>将修改文件缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add &lt;file-name&gt;</span><br></pre></td></tr></table></figure><p>取消缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD &lt;name&gt;</span><br></pre></td></tr></table></figure><p>提交缓存的修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">&#x27;本次提交描述&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-git-commit-具体操作"><a href="#4-git-commit-具体操作" class="headerlink" title="4.$ git commit 具体操作"></a>4.$ git commit 具体操作</h3><p>① $ git commit 进入提交界面, </p><p>​    按” i “键进入输入模式后输入本次提交详情,</p><p>​    然后esc退出编辑模式, 按” : “进入命令栏, 输入”wq”保存并退出.</p><p>② $ git commit -m ‘ 你对提交内容的描述 ‘</p><p>③ $ git commit -a</p><p>​    连带未暂存文件一起提交</p><p>​    git commit -am ‘提交描述’</p><h2 id="三、远程仓库"><a href="#三、远程仓库" class="headerlink" title="三、远程仓库"></a><strong>三、远程仓库</strong></h2><p>新建远程仓库</p><h3 id="1-链接远程仓库到本地"><a href="#1-链接远程仓库到本地" class="headerlink" title="1.链接远程仓库到本地"></a><strong>1.链接远程仓库到本地</strong></h3><p>本地添加远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin 远程仓库链接</span><br></pre></td></tr></table></figure><h3 id="2-重命名仓库"><a href="#2-重命名仓库" class="headerlink" title="2.重命名仓库"></a><strong>2.重命名仓库</strong></h3><p>查看远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br></pre></td></tr></table></figure><p>修改远程仓库名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rename &lt;name&gt; &lt;new name&gt;</span><br></pre></td></tr></table></figure><h3 id="3-推送本地代码到远程仓库"><a href="#3-推送本地代码到远程仓库" class="headerlink" title="3.推送本地代码到远程仓库"></a><strong>3.推送本地代码到远程仓库</strong></h3><p>推送</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push 仓库名 分支名</span><br></pre></td></tr></table></figure><h3 id="4-验证"><a href="#4-验证" class="headerlink" title="4.验证"></a>4.验证</h3><p>①使用token令牌验证</p><p>②简单方式:SSH鉴权</p><h2 id="四、分支"><a href="#四、分支" class="headerlink" title="四、分支"></a><strong>四、分支</strong></h2><h3 id="1-分支的概念"><a href="#1-分支的概念" class="headerlink" title="1.分支的概念"></a><strong>1.分支的概念</strong></h3><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201713467.png" alt="image-20230502114331064"></p><p><strong>每次提交时会生成一个提交对象，每个提交对象有独一无二的哈希值，分支就是一个包含该哈希值的文件</strong></p><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201713821.png" alt="image-20230502114425973"></p><p><strong>可以理解为分支就是某次提交的一个指针，可以在一个提交对象上新建多个分支</strong></p><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201713972.png" alt="image-20230502114643286"></p><p><strong>初始化本地仓库时就会新建一个master分支</strong></p><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201714925.png" alt="image-20230502114845388"></p><p><strong>每次进行一次提交时，分支也会跟着提交对象向前移动</strong></p><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201714195.png" alt="image-20230502115127464"></p><p><strong>在第二次提交对象上新建一个分支</strong></p><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201713789.png" alt="image-20230502115345401"></p><p><strong>之后的提交就会有不同的分支</strong></p><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201714633.png" alt="image-20230502115507549"></p><h3 id="2-经典git模型"><a href="#2-经典git模型" class="headerlink" title="2.经典git模型"></a><strong>2.经典git模型</strong></h3><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201714264.png" alt="image-20230502115831722"></p><h3 id="3-分支操作"><a href="#3-分支操作" class="headerlink" title="3.分支操作"></a><strong>3.分支操作</strong></h3><h4 id="创建分支名"><a href="#创建分支名" class="headerlink" title="创建分支名"></a>创建分支名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch 分支名</span><br></pre></td></tr></table></figure><h4 id="查看分支名"><a href="#查看分支名" class="headerlink" title="查看分支名"></a>查看分支名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --list</span><br></pre></td></tr></table></figure><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a><strong>切换分支</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout 分支名</span><br></pre></td></tr></table></figure><h2 id="五、分支合并"><a href="#五、分支合并" class="headerlink" title="五、分支合并"></a><strong>五、分支合并</strong></h2><h3 id="1-无冲突合并"><a href="#1-无冲突合并" class="headerlink" title="1.无冲突合并"></a><strong>1.无冲突合并</strong></h3><p>在 合并至 的分支使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge 要合并的分支</span><br></pre></td></tr></table></figure><h3 id="2-分支冲突-merge-conflict"><a href="#2-分支冲突-merge-conflict" class="headerlink" title="2.分支冲突 merge conflict"></a><strong>2.分支冲突 merge conflict</strong></h3><p>将 分支2 合并到 master分支 时, 与 分支1 冲突了. 原因是 分支1 和 分支2 修改了同一处内容.</p><p>查看哪里有冲突</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status </span><br></pre></td></tr></table></figure><p> $ vi 到冲突文件中, 选择一个分支的内容保留下来, 保存退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git add 文件名</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">&#x27;提交描述&#x27;</span></span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">log</span> --all --graph 查看合并状态</span><br></pre></td></tr></table></figure><h2 id="六、推拉与远程跟踪分支"><a href="#六、推拉与远程跟踪分支" class="headerlink" title="六、推拉与远程跟踪分支"></a><strong>六、推拉与远程跟踪分支</strong></h2><h3 id="1-推送"><a href="#1-推送" class="headerlink" title="1.推送"></a><strong>1.推送</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push 仓库名 分支名</span><br></pre></td></tr></table></figure><p> <strong>或者</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u 仓库名 分支名</span><br></pre></td></tr></table></figure><p> <strong>第一次使用 -u 指定推送目标后, 此后可直接使用git push</strong></p><h3 id="2-拉取"><a href="#2-拉取" class="headerlink" title="2.拉取"></a><strong>2.拉取</strong></h3><p> $ git fetch</p><p> $ git checkout 远程分支</p><p> $ git checkout -b 本地分支名 远程分支</p><p> $ git checkout –track 远程分支</p><h2 id="七、贮藏功能"><a href="#七、贮藏功能" class="headerlink" title="七、贮藏功能"></a><strong>七、贮藏功能</strong></h2><p><strong>1.git stash</strong></p><p>代码写到一半有13事儿来了, 要切换到其他分支是不允许的, 可以把当前分支修改的东西储藏起来再切换.</p><p><strong>2.git stash apply</strong></p><p>切换回来后, 恢复之前存储的内容</p><p><strong>3.多次存储</strong></p><p>a.回看存储记录</p><p> $ git stash list</p><p>b.恢复指定记录</p><p> $ git stash apply stash@{记录号}</p><p>c.恢复并删除记录</p><p>①恢复并删除最近一次记录</p><p> $ git stash pop</p><p>②<strong>删除</strong>指定记录</p><p> $ git stash drop @stash{记录号}</p><h2 id="八、重置与变基"><a href="#八、重置与变基" class="headerlink" title="八、重置与变基"></a><strong>八、重置与变基</strong></h2><p><strong>1.reset(重置)</strong></p><p>a. head</p><p> head: 当前的提交</p><p> head~: 上次的提交</p><p> head~2: 倒数第二次的提交</p><p>b. –soft</p><p> 仅取消commit操作, 把修改文件暂存.</p><p> 如果不加 –soft 则表示恢复到暂存前, 修改的内容是存在的.</p><p>c. –hard</p><p> 取消暂存, 还取消修改内容, 彻底回到上次提交的状态.</p><p> 不推荐使用, 可能丢失数据.</p><p><strong>2.rebase(变基)</strong></p><p>a.将B分支的修改移动到A分支</p><p> git checkout B</p><p> git rebase A</p><p>b.注意事项</p><p>注意他人在远程分支二次开发时, 审慎使用变基</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/20/hello-world/"/>
      <url>/2023/05/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
