<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构入门</title>
      <link href="/posts/4729e793.html"/>
      <url>/posts/4729e793.html</url>
      
        <content type="html"><![CDATA[<h1>一. 初识算法</h1><h2 id="1-1-什么是算法？">1.1 什么是算法？</h2><p><strong>定义</strong></p><p>在数学和计算机科学领域，算法是一系列有限的严谨指令，通常用于解决一类特定问题或执行计算</p><blockquote><p>In mathematics and computer science, an <strong>algorithm</strong> (/ˈælɡərɪðəm/) is a finite sequence of rigorous instructions, typically used to solve a class of specific problems or to perform a computation.<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p></blockquote><p><strong>Introduction to Algorithm<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></strong></p><p>不正式的说，算法就是任何定义优良的计算过程：接收一些值作为输入，在有限的时间内，产生一些值作为输出。</p><blockquote><p>Informally, an algorithm is any well-defined computational procedure that takes some value, or set of values, as input and produces some value, or set of values, as output in a finite amount of time.</p></blockquote><h2 id="1-2-什么是数据结构？">1.2 什么是数据结构？</h2><p><strong>定义</strong></p><p>在计算机科学领域，数据结构是一种数据组织、管理和存储格式，通常被选择用来高效访问数据</p><blockquote><p>In computer science, a <strong>data structure</strong> is a data organization, management, and storage format that is usually chosen for efficient access to data</p></blockquote><p><strong>Introduction to Algorithm<sup class="footnote-ref"><a href="#fn2" id="fnref2:1">[2:1]</a></sup></strong></p><p>数据结构是一种存储和组织数据的方式，旨在便于访问和修改</p><blockquote><p>A data structure is a way to store and organize data in order to facilitate access and modifications</p></blockquote><p>接下来我们通过对一个非常著名的二分查找算法的讲解来认识一下算法</p><h2 id="1-3-二分查找">1.3 二分查找 <sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></h2><p>二分查找算法也称折半查找，是一种非常高效的工作于有序数组的查找算法。后续的课程中还会学习更多的查找算法，但在此之前，不妨用它作为入门。</p><h3 id="二分查找基础版">二分查找基础版</h3><p>需求：在<strong>有序</strong>数组 $A$ 内，查找值 $target$</p><ul><li>如果找到返回索引</li><li>如果找不到返回 $-1$</li></ul><table><thead><tr><th>算法描述</th><th></th></tr></thead><tbody><tr><td>前提</td><td>给定一个内含 $n$ 个元素的有序数组 $A$，满足 $A_{0}\leq A_{1}\leq A_{2}\leq \cdots \leq A_{n-1}$，一个待查值 $target$</td></tr><tr><td>1</td><td>设置 $i=0$，$j=n-1$</td></tr><tr><td>2</td><td>如果 $i \gt j$，结束查找，没找到</td></tr><tr><td>3</td><td>设置 $m = floor(\frac {i+j}{2})$ ，$m$ 为中间索引，$floor$ 是向下取整（$\leq \frac {i+j}{2}$ 的最小整数）</td></tr><tr><td>4</td><td>如果 $target &lt; A_{m}$ 设置 $j = m - 1$，跳到第2步</td></tr><tr><td>5</td><td>如果 $A_{m} &lt; target$ 设置 $i = m + 1$，跳到第2步</td></tr><tr><td>6</td><td>如果 $A_{m} = target$，结束查找，找到了</td></tr></tbody></table><p>java 实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; a[m]) &#123;<span class="comment">// 在左边</span></span><br><span class="line">            j = m - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[m] &lt; target) &#123;<span class="comment">// 在右边</span></span><br><span class="line">            i = m + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>$i,j$ 对应着搜索区间 $[0,a.length-1]$（注意是闭合的区间），$i&lt;=j$ 意味着搜索区间内还有未比较的元素，$i,j$ 指向的元素也可能是比较的目标<ul><li>思考：如果不加 $i==j$ 行不行？</li><li>回答：不行，因为这意味着 $i,j$ 指向的元素会漏过比较</li></ul></li><li>$m$ 对应着中间位置，中间位置左边和右边的元素可能不相等（差一个），不会影响结果</li><li>如果某次未找到，那么缩小后的区间内不包含 $m$</li></ul><h3 id="二分查找改变版">二分查找改变版</h3><p>另一种写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = a.length;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; a[m]) &#123;<span class="comment">// 在左边</span></span><br><span class="line">            j = m;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[m] &lt; target) &#123;<span class="comment">// 在右边</span></span><br><span class="line">            i = m + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>$i,j$ 对应着搜索区间 $[0,a.length)$（注意是左闭右开的区间），$i&lt;j$ 意味着搜索区间内还有未比较的元素，$j$ 指向的<strong>一定不是</strong>查找目标<ul><li>思考：为啥这次不加 $i==j$ 的条件了？</li><li>回答：这回 $j$ 指向的不是查找目标，如果还加 $i==j$ 条件，就意味着 $j$ 指向的还会再次比较，找不到时，会死循环</li></ul></li><li>如果某次要缩小右边界，那么 $j=m$，因为此时的 $m$ 已经<strong>不是</strong>查找目标了</li></ul><h1>附录</h1><h2 id="参考文章">参考文章</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://www.merriam-webster.com/dictionary/algorithm">“Definition of ALGORITHM”</a>. <em>Merriam-Webster Online Dictionary</em>. <a href="https://web.archive.org/web/20200214074446/https://www.merriam-webster.com/dictionary/algorithm">Archived</a> from the original on February 14, 2020. Retrieved November 14, 2019. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>Introduction to Algorithm 中文译作《算法导论》 <a href="#fnref2" class="footnote-backref">↩︎</a> <a href="#fnref2:1" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>主要参考文档 https://en.wikipedia.org/wiki/Binary_search_algorithm <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 知识笔记 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基本使用</title>
      <link href="/posts/2df4f2b8.html"/>
      <url>/posts/2df4f2b8.html</url>
      
        <content type="html"><![CDATA[<h1><strong>Git基础入门</strong></h1><h2 id="一、Git原理简要"><strong>一、Git原理简要</strong></h2><p>4个区域</p><p>Workspace：工作区 Stage：暂存区 Repository：本地仓库 Remote：远程仓库</p><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201713519.png" alt="basic-usage.svg"></p><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201713154.png" alt="basic-usage-2.svg"></p><h3 id="1-下载与安装"><strong>1.下载与安装:</strong></h3><p>https://git-scm.com/download/</p><h3 id="2-使用入口"><strong>2.使用入口</strong></h3><p>win：右键菜单—git bash</p><p>mac：终端窗口</p><h3 id="3-基础配置"><strong>3.基础配置</strong></h3><p>首次使用添加身份说明，使用以下两个命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;你的昵称&quot;</span></span><br><span class="line"></span><br><span class="line">$ git config --global user.email 邮箱@example.com</span><br></pre></td></tr></table></figure><p>创建仓库</p><p>① 在项目文件夹下使用git bash输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>② 使用他人项目创建仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> 项目url</span><br></pre></td></tr></table></figure><h2 id="二、状态与提交版本"><strong>二、状态与提交版本</strong></h2><p>文件四种状态</p><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201713561.png" alt="image-20230502111811562"></p><h3 id="1-跟踪">1.跟踪</h3><p>跟踪文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add &lt;name&gt;</span><br></pre></td></tr></table></figure><p>跟踪当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure><h3 id="2-取消跟踪">2.取消跟踪</h3><p>rm删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">rm</span> &lt;name&gt;</span><br></pre></td></tr></table></figure><p>保留但不跟踪</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm-cache &lt;name&gt;</span><br></pre></td></tr></table></figure><h3 id="3-文件状态修改">3.文件状态修改</h3><p>修改后缓存 / 取消缓存</p><p>将修改文件缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add &lt;file-name&gt;</span><br></pre></td></tr></table></figure><p>取消缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD &lt;name&gt;</span><br></pre></td></tr></table></figure><p>提交缓存的修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">&#x27;本次提交描述&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-git-commit-具体操作">4.$ git commit 具体操作</h3><p>① $ git commit 进入提交界面,</p><p>​    按&quot; i &quot;键进入输入模式后输入本次提交详情,</p><p>​    然后esc退出编辑模式, 按&quot; : &quot;进入命令栏, 输入&quot;wq&quot;保存并退出.</p><p>② $ git commit -m ’ 你对提交内容的描述 ’</p><p>③ $ git commit -a</p><p>​    连带未暂存文件一起提交</p><p>​    git commit -am ‘提交描述’</p><h2 id="三、远程仓库"><strong>三、远程仓库</strong></h2><p>新建远程仓库</p><h3 id="1-链接远程仓库到本地"><strong>1.链接远程仓库到本地</strong></h3><p>本地添加远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin 远程仓库链接</span><br></pre></td></tr></table></figure><h3 id="2-重命名仓库"><strong>2.重命名仓库</strong></h3><p>查看远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br></pre></td></tr></table></figure><p>修改远程仓库名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rename &lt;name&gt; &lt;new name&gt;</span><br></pre></td></tr></table></figure><h3 id="3-推送本地代码到远程仓库"><strong>3.推送本地代码到远程仓库</strong></h3><p>推送</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push 仓库名 分支名</span><br></pre></td></tr></table></figure><h3 id="4-验证">4.验证</h3><p>①使用token令牌验证</p><p>②简单方式:SSH鉴权</p><h2 id="四、分支"><strong>四、分支</strong></h2><h3 id="1-分支的概念"><strong>1.分支的概念</strong></h3><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201713467.png" alt="image-20230502114331064"></p><p><strong>每次提交时会生成一个提交对象，每个提交对象有独一无二的哈希值，分支就是一个包含该哈希值的文件</strong></p><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201713821.png" alt="image-20230502114425973"></p><p><strong>可以理解为分支就是某次提交的一个指针，可以在一个提交对象上新建多个分支</strong></p><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201713972.png" alt="image-20230502114643286"></p><p><strong>初始化本地仓库时就会新建一个master分支</strong></p><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201714925.png" alt="image-20230502114845388"></p><p><strong>每次进行一次提交时，分支也会跟着提交对象向前移动</strong></p><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201714195.png" alt="image-20230502115127464"></p><p><strong>在第二次提交对象上新建一个分支</strong></p><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201713789.png" alt="image-20230502115345401"></p><p><strong>之后的提交就会有不同的分支</strong></p><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201714633.png" alt="image-20230502115507549"></p><h3 id="2-经典git模型"><strong>2.经典git模型</strong></h3><p><img src="https://doido-pic-bed.oss-cn-hangzhou.aliyuncs.com/img/202305201714264.png" alt="image-20230502115831722"></p><h3 id="3-分支操作"><strong>3.分支操作</strong></h3><h4 id="创建分支名">创建分支名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch 分支名</span><br></pre></td></tr></table></figure><h4 id="查看分支名">查看分支名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --list</span><br></pre></td></tr></table></figure><h4 id="切换分支"><strong>切换分支</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout 分支名</span><br></pre></td></tr></table></figure><h2 id="五、分支合并"><strong>五、分支合并</strong></h2><h3 id="1-无冲突合并"><strong>1.无冲突合并</strong></h3><p>在 合并至 的分支使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge 要合并的分支</span><br></pre></td></tr></table></figure><h3 id="2-分支冲突-merge-conflict"><strong>2.分支冲突 merge conflict</strong></h3><p>将 分支2 合并到 master分支 时, 与 分支1 冲突了. 原因是 分支1 和 分支2 修改了同一处内容.</p><p>查看哪里有冲突</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status </span><br></pre></td></tr></table></figure><p>$ vi 到冲突文件中, 选择一个分支的内容保留下来, 保存退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git add 文件名</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">&#x27;提交描述&#x27;</span></span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">log</span> --all --graph 查看合并状态</span><br></pre></td></tr></table></figure><h2 id="六、推拉与远程跟踪分支"><strong>六、推拉与远程跟踪分支</strong></h2><h3 id="1-推送"><strong>1.推送</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push 仓库名 分支名</span><br></pre></td></tr></table></figure><p><strong>或者</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u 仓库名 分支名</span><br></pre></td></tr></table></figure><p><strong>第一次使用 -u 指定推送目标后, 此后可直接使用git push</strong></p><h3 id="2-拉取"><strong>2.拉取</strong></h3><p>$ git fetch</p><p>$ git checkout 远程分支</p><p>$ git checkout -b 本地分支名 远程分支</p><p>$ git checkout --track 远程分支</p><h2 id="七、贮藏功能"><strong>七、贮藏功能</strong></h2><p><strong>1.git stash</strong></p><p>代码写到一半有13事儿来了, 要切换到其他分支是不允许的, 可以把当前分支修改的东西储藏起来再切换.</p><p><strong>2.git stash apply</strong></p><p>切换回来后, 恢复之前存储的内容</p><p><strong>3.多次存储</strong></p><p>a.回看存储记录</p><p>$ git stash list</p><p>b.恢复指定记录</p><p>$ git stash apply stash@{记录号}</p><p>c.恢复并删除记录</p><p>①恢复并删除最近一次记录</p><p>$ git stash pop</p><p>②<strong>删除</strong>指定记录</p><p>$ git stash drop @stash{记录号}</p><h2 id="八、重置与变基"><strong>八、重置与变基</strong></h2><p><strong>1.reset(重置)</strong></p><p>a. head</p><p>head: 当前的提交</p><p>head~: 上次的提交</p><p>head~2: 倒数第二次的提交</p><p>b. --soft</p><p>仅取消commit操作, 把修改文件暂存.</p><p>如果不加 --soft 则表示恢复到暂存前, 修改的内容是存在的.</p><p>c. --hard</p><p>取消暂存, 还取消修改内容, 彻底回到上次提交的状态.</p><p>不推荐使用, 可能丢失数据.</p><p><strong>2.rebase(变基)</strong></p><p>a.将B分支的修改移动到A分支</p><p>git checkout B</p><p>git rebase A</p><p>b.注意事项</p><p>注意他人在远程分支二次开发时, 审慎使用变基</p>]]></content>
      
      
      <categories>
          
          <category> 知识笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
